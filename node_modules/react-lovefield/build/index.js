import React, { Children, Component } from 'react';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DBProvider = function (_Component) {
  _inherits(DBProvider, _Component);

  function DBProvider() {
    _classCallCheck(this, DBProvider);

    return _possibleConstructorReturn(this, (DBProvider.__proto__ || Object.getPrototypeOf(DBProvider)).apply(this, arguments));
  }

  _createClass(DBProvider, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return { db: this.props.db };
    }
  }, {
    key: 'render',
    value: function render() {
      return Children.only(this.props.children);
    }
  }]);

  return DBProvider;
}(Component);

DBProvider.childContextTypes = {
  db: React.PropTypes.object
};
function connectDB() {
  var getters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var setters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  return function (ConnectComponent) {
    var _class, _temp;

    return _temp = _class = function (_Component2) {
      _inherits(ConnectDB, _Component2);

      function ConnectDB(props, context) {
        _classCallCheck(this, ConnectDB);

        var _this2 = _possibleConstructorReturn(this, (ConnectDB.__proto__ || Object.getPrototypeOf(ConnectDB)).call(this, props, context));

        _this2.state = {};
        return _this2;
      }

      _createClass(ConnectDB, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
          var _this3 = this;

          var db = this.context.db;


          this.getters = Object.entries(getters).reduce(function (o, _ref) {
            var _ref2 = _slicedToArray(_ref, 2),
                name = _ref2[0],
                fn = _ref2[1];

            var _ref3 = [fn(db), function (_ref4) {
              var _ref5 = _slicedToArray(_ref4, 1),
                  object = _ref5[0].object;

              return _this3.setState(_defineProperty({}, name, object));
            }],
                query = _ref3[0],
                handler = _ref3[1];

            db.observe(query, handler);
            o[name] = [query, handler];
            return o;
          }, {});

          this.queries = Object.keys(this.getters).reduce(function (o, name) {
            o[name] = function (field) {
              for (var _len = arguments.length, values = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                values[_key - 1] = arguments[_key];
              }

              var _getters$name = _slicedToArray(_this3.getters[name], 2),
                  query = _getters$name[0],
                  handler = _getters$name[1];

              var nextQuery = getters[name](db, field);
              db.unobserve(query, handler);
              db.observe(nextQuery, handler);
              _this3.getters[name] = [nextQuery, handler];
              nextQuery.bind(values).exec();
            };
            return o;
          }, {});

          this.setters = Object.entries(setters).reduce(function (o, _ref6) {
            var _ref7 = _slicedToArray(_ref6, 2),
                name = _ref7[0],
                fn = _ref7[1];

            o[name] = function () {
              for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                args[_key2] = arguments[_key2];
              }

              return _this3.transact(db, [fn.apply(undefined, [db].concat(args))]);
            };
            return o;
          }, {});
        }
      }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
          var db = this.context.db;


          Object.values(this.getters).forEach(function (_ref8) {
            var _ref9 = _slicedToArray(_ref8, 2),
                query = _ref9[0],
                handler = _ref9[1];

            db.unobserve(query, handler);
          });

          this.getters = {};
          this.queries = {};
          this.setters = [];
        }
      }, {
        key: 'transact',
        value: function transact(db, queries) {
          return db.createTransaction().exec(queries);
        }
      }, {
        key: 'render',
        value: function render() {
          return React.createElement(ConnectComponent, _extends({}, this.state, this.setters, { queries: this.queries }));
        }
      }]);

      return ConnectDB;
    }(Component), _class.contextTypes = {
      db: React.PropTypes.object
    }, _temp;
  };
}

export { DBProvider, connectDB };
