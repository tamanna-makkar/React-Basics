import React, { Component, Children } from 'react';

export class DBProvider extends Component {
  static childContextTypes = {
    db: React.PropTypes.object
  }
  getChildContext() {
    return { db: this.props.db }
  }
  render() {
    return Children.only(this.props.children);
  }
}

export function connectDB(getters = {}, setters = {}, ) {
  return (ConnectComponent) => {
    return class ConnectDB extends Component {
      static contextTypes = {
        db: React.PropTypes.object
      }
      constructor(props, context) {

        super(props, context);

        this.state = {};
      }
      componentWillMount() {

        const { db } = this.context;

        this.getters = (
          Object.entries(getters)
            .reduce((o, [name, fn]) => {
              const [query, handler] = [fn(db), ([{object}]) => this.setState({ [name]: object })];
              db.observe(query, handler);
              o[name] = [query, handler];
              return o;
            }, {})
        )

        this.queries = (
          Object.keys(this.getters)
            .reduce((o, name) => {
              o[name] = (field, ...values) => {
                const [query, handler] = this.getters[name];
                const nextQuery = getters[name](db, field);
                db.unobserve(query, handler);
                db.observe(nextQuery, handler);
                this.getters[name] = [nextQuery, handler];
                nextQuery.bind(values).exec();
              };
              return o;
            }, {})
        )

        this.setters = (
          Object.entries(setters)
            .reduce((o, [name, fn]) => {
              o[name] = (...args) => this.transact(db, [fn(db, ...args)]);
              return o;
            }, {})
        )
      }
      componentWillUnmount() {

        const { db } = this.context;

        Object.values(this.getters)
          .forEach(([query, handler]) => {
            db.unobserve(query, handler);
          });

        this.getters = {};
        this.queries = {};
        this.setters = [];
      }
      transact(db, queries) {
        return db.createTransaction().exec(queries);
      }
      render() {
        return <ConnectComponent {...this.state} {...this.setters} queries={this.queries} />;
      }
    }
  }
}
